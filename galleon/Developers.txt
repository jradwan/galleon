Notes for Galleon Developers
============================

After sending an email request to become a Galleon developer to
javahmo@users.sourceforge.net, you will also be added to two mailing lists:
galleon-developers@lists.sourceforge.net: used for developer issues,
galleon-commits@lists.sourceforge.net: used by CVS to automatically post all checkins.
Both these mailing lists are archived on the project development page.

To help us keep track of who is doing what, we use the project bug and
feature trackers.  If you want to fix a particular bug or implement a
feature, assign it to yourself. If there are any new features you want
to work on, go ahead and add new features to the tracker.  If you decide
to do any significant development changes to JavaHMO it is recommended
that you use the mailing list to get feedback first.

I suggest that you read through the developer documentation provided by
Sourceforge.  Everything you will need to know to use CVS and the
project tools are explained in detail.


Upgrading or adding Third-party components
--------

1. Update ThirdPartyLicenses.txt as appropriate.  If the license is a
   common one, just add the new item to the list for that license.
   Include a URL where you got it.

   When adding java libraries to lib/, include the version number in the name

2. update the classpath used by Eclipse (add the jar file to the project
   build path)

3. update one or more of the following to ensure the jar files are
   included in the build and in the classpath at run-time:

   build.xml
   bin/win32/run.cmd
   distro/osx/bundles/Configure Galleon.app/Contents/Info.plist
   distro/osx/bundles/Galleon Server.app/Contents/Info.plist
   distro/win32/galleon.nsi

   (UNIX/Linux classpath just takes everything in the lib directory, no
   file to edit)

Building
--------
Galleon uses JDK 5

Ant build scripts are used to manage the build process (http://ant.apache.org).  
To compile the galleon.jar file:
ant compile

To build Galleon packages:

* Windows: run 'ant compile' then use NSIS (nsis.sourceforge.net) to compile
  distro/win32/galleon.nsi
  to create distro/win32/Setup.exe
  (Very nice to use the NSIS eclipse plugin)
  http://eclipsensis.sourceforge.net/

* Linux: run 'distro/unix/build-zipfile.sh yes'
  (runs ant for you)
  generates galleon-<release>-linux.zip
  you can do this on OSX or Linux.

* OSX: run 'distro/osx/build-osx.sh yes'
  (runs ant for you)
  generates Galleon-<release>.dmg

To create a source copy:
ant source

To update the version number:

* Edit ReleaseNotes.txt to add a new section
* edit ./update-vno.sh to change the version numbers (set the old and
  new appropriately)
* run ./update-vno.sh (on UNIX, Linux or OSX)
  no args: previews and shows what it would change
  one arg: does the change
* commit the resulting changes

To create a release:

* Tag the sources in the CVS repository (GALLEON_x_y_z)
* Create a new file release (sourceforge admin tasks "File releases")
* Upload the Galleon-<release>.dmg, galleon-<release>.exe,
  galleon-<release>-linux.zip files

* Create a new news item in galleon.sourceforge.net (admin->news) titled
  "Galleon <release-number> for TiVo".

  That news item will trigger existing galleon installations to notify
  the owners that there's a new release.

* Update the top-level page at http://galleon.sourceforge.net/

Winamp skins (text from ReleaseNotes.txt):

       The project has permission from the author of the Metrix Winamp classic
       skins (Sven Kistner) to distribute the skins with the Galleon project:

       http://www.winamp.com/skins/browse.php?search=yes&filter=S&query=metrix

       However, for copyright reasons, the skins are not checked into the
       project CVS. The Galleon build script will add any *.wsz Winamp skin
       files that are in the media/winamp directory to a package build. The
       Galleon GUI will detect any *.wsz files that are in the media/winamp
       directory and will allow the user to pick a skin in the music app
       configuration screen.

You need to have these files in your source directories to build
correctly-functioning distribution packages:

	./media/winamp/metrix.wsz
	./media/winamp/metrix_metal-dream.wsz
	./media/winamp/metrix_metal_dream_gold.wsz
	./media/winamp/metrix_metal_dream_green.wsz
	./media/winamp/metrix_metal_dream_red.wsz

Running
-------

Use the scripts in the bin directory to run the configuration GUI and
Galleon server.


Coding Style
------------
The Java code should conform to the Sun Java Coding conventions. 


Database
--------
Galleon uses Apache Derby (http://db.apache.org/derby/manuals/index.html) as an embedded database. However,
it can be replaced by any database supported by Hibernate (http://www.hibernate.org/80.html) by changing the conf/hibernate.properties file.

While the Galleon server is running, Derby runs as a network server, meaning that you can connect to it remotely.
You can use a program such as DBVisualizer (http://www.codework.com/dbvis/product.html) to connect to the Derby database. 
You can use the embedded driver or a JDBC driver (It is also possible to use ODBC: http://www-106.ibm.com/developerworks/db2/library/techarticle/dm-0409cline2/index.html) 

IBM provides a free JDBC driver:
http://www-128.ibm.com/developerworks/db2/downloads/jcc/

If you are using DBVisualiser, the driver jar files need to imported using the Tools/Driver Manager menu.
Use the following database URL to connect to Derby while Galleon is running using the DB2 driver:
jdbc:derby:net//localhost:1527/galleon
Use the following database URL to connect to Derby when Galleon is not running (using the path of the Galleon data dir) and using the embedded driver:
jdbc:derby:d:/galleon/data/galleon

userid: galleon
password: galleon

GUI
---
The GUI communicates with the server using Java RMI which binds to port 1099. This elliminates the proprietary 
socket connection that JavaHMO used. This will also allow headless systems to remotely configure the server.

Debugging
---------

To start the GUI in a debugger, use org.lnicholls.galleon.gui.Galleon.
Command line args are: [server-hostname [rmi-port]]

To start the server in a debugger, use
org.lnicholls.galleon.server.Server or org.lnicholls.galleon.server.OSXServer
Command line args are: [rmi-port]

If you specify a specific rmi-port, you can then run a production
Galleon and debug Galleon on the same host.  Some things don't work
quite right, though:
      * TiVo beacon for HMO/TTCB can't receive broadcast beacon events,
      it can only send them.  (Only one listener per host can bind the
      receive port.)  This means you need to add your TiVos manually to
      the ToGo list.

There are a few other classes that have public static void main()
routines, feel free to add more for unit testing.

Eclipse makes a nice debug/development environment.
http://www.eclipse.org/

Weather
-------
The Weather.com XML feed is used to obtain the weather data:
http://registration.weather.com/registration/xmloap/step1
To comply with the XML feed licence, the configuration GUI will include several links to the Weather.com site.


--------------------------------------
galleon.sourceforge.net
javahmo@users.sourceforge.net
